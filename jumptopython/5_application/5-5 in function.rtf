{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red140\green148\blue165;\red25\green28\blue32;}
{\*\expandedcolortbl;;\cssrgb\c61569\c64706\c70588;\cssrgb\c12941\c14510\c16863;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11000\viewh19580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs42 \cf0 ch5-5. \'b3\'bb\'c0\'e5\'c7\'d4\'bc\'f6\
- \'c1\'f6\'b1\'dd\'b1\'ee\'c1\'f6 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'bb \'b8\'b8\'b5\'e9\'b1\'e2 \'c0\'a7\'c7\'d8 \'be\'cb\'be\'c6\'be\'df\'c7\'cf\'b4\'c2 \'b4\'eb\'ba\'ce\'ba\'d0\'c0\'bb \'b0\'f8\'ba\'ce\'c7\'df\'b4\'d9.\
- \'b1\'d7 \'c0\'fc\'bf\'a1, \'bf\'ec\'b8\'ae\'b4\'c2 \'b8\'b8\'b5\'e5\'b7\'c1\'b4\'c2 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'cc \'c0\'cc\'b9\'cc \'b8\'b8\'b5\'e9\'be\'ee\'c1\'ae \'c0\'d5\'b4\'c2\'c1\'f6 \'bb\'ec\'c7\'ca \'c7\'ca\'bf\'e4\'b0\'a1 \'c0\'d6\'b4\'d9.\
- \'c0\'cc\'b9\'f8 \'c6\'ed\'bf\'a1\'bc\'ad, \'bf\'ec\'b8\'ae\'b4\'c2 \'c6\'c4\'c0\'cc\'bd\'e3 \'b9\'e8\'c6\'f7\'ba\'bb\'bf\'a1 \'c7\'d4\'b2\'b2 \'b5\'e9\'be\'ee \'c0\'d6\'b4\'c2 \'c6\'c4\'c0\'cc\'bd\'e3 \'b6\'f3\'c0\'cc\'ba\'ea\'b7\'af\'b8\'ae\'b5\'e9\'c0\'bb \'bb\'ec\'c6\'ec\'ba\'bc \'b0\'cd\'c0\'cc\'b4\'d9.\
\
- \'bf\'ec\'b8\'ae\'b0\'a1 \'c0\'cc\'b9\'cc \'be\'cb\'b0\'ed \'c0\'d6\'b4\'c2 \'c6\'c4\'c0\'cc\'bd\'e3 \'b3\'bb\'c0\'e5\'c7\'d4\'bc\'f6 : print, del, type \'b5\'ee\'c0\'cc \'c0\'d6\'b4\'d9. ~ \'c0\'cc\'b7\'af\'c7\'d1 \'b3\'bb\'c0\'e5 \'c7\'d4\'bc\'f6\'b4\'c2 \'bf\'dc\'ba\'ce \'b8\'f0\'b5\'e2\'b0\'fa \'b4\'de\'b8\'ae \'ba\'b0\'b5\'b5\'c0\'c7 import\'b0\'a1 \'c7\'ca\'bf\'e4\'c7\'cf\'c1\'f6 \'be\'ca\'b4\'d9.\
- \'b4\'e7\'c0\'e5 \'bf\'dc\'bf\'ef \'c7\'ca\'bf\'e4\'b4\'c2 \'be\'f8\'b0\'ed, \'c3\'b5\'c3\'b5\'c8\'f7 \'bb\'ec\'c6\'ec\'ba\'b8\'c0\'da!\
\

\f1\b \ul ** abs
\f0\b0 \ulnone \
- \'c0\'fd\'b4\'f1\'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
abs(-3)\
>>> 3\
\

\f1\b \ul ** all
\f0\b0 \ulnone \
- \'b9\'dd\'ba\'b9 \'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc x\'b8\'a6 \'c0\'d4\'b7\'c2 \'c0\'ce\'bc\'f6\'b7\'ce \'b9\'de\'c0\'b8\'b8\'e7, \'c0\'cc x\'b0\'a1 \'b8\'f0\'b5\'ce \'c2\'fc\'c0\'cc\'b8\'e9 True, \'b0\'c5\'c1\'fe\'c0\'cc \'c7\'cf\'b3\'aa\'b6\'f3\'b5\'b5 \'c0\'d6\'c0\'b8\'b8\'e9 False\'b8\'a6 \'b5\'b9\'b7\'c1\'c1\'d8\'b4\'d9.\
- \'b9\'dd\'ba\'b9 \'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc : for\'b9\'ae\'c0\'b8\'b7\'ce \'b1\'d7 \'b0\'aa\'c0\'bb \'c3\'e2\'b7\'c2\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b0\'cd (\'b8\'ae\'bd\'ba\'c6\'ae, \'c6\'a9\'c7\'c3, \'b9\'ae\'c0\'da\'bf\'ad, \'b5\'f1\'bc\'c5\'b3\'ca\'b8\'ae \'b5\'ee)\
all([1,2,3])\
>>> True\
all([1,2,3,0])\
>>> False\
\

\f1\b \ul ** any
\f0\b0 \ulnone \
- all\'b0\'fa \'ba\'f1\'bd\'c1\'a1\'a6 \'c2\'fc\'c0\'ce \'b0\'aa\'c0\'cc \'c7\'cf\'b3\'aa\'b6\'f3\'b5\'b5 \'c0\'d6\'c0\'b8\'b8\'e9 True, \'b8\'f0\'b5\'ce \'b0\'c5\'c1\'fe\'c0\'cc\'b8\'e9 False (all(x)\'c0\'c7 \'b9\'dd\'b4\'eb)\
any([1,2,3,0])\
>>> True\
any([0, \'a1\'b0\'a1\'b1])\
>>> False\
\

\f1\b \ul ** chr
\f0\b0 \ulnone \
- chr(i) : i\'bf\'a1 \'be\'c6\'bd\'ba\'c5\'b0\'c4\'da\'b5\'e5 \'b0\'aa\'c0\'bb \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6, \'b1\'d7 \'c4\'da\'b5\'e5\'bf\'a1 \'c7\'d8\'b4\'e7\'c7\'cf\'b4\'c2 \'b9\'ae\'c0\'da\'b8\'a6 \'c3\'e2\'b7\'c2\'c7\'cf\'b4\'c2 \'c7\'d4\'bc\'f6\'c0\'cc\'b4\'d9.\
chr(97)\
>>> \'a1\'aea\'a1\'af\
\

\f1\b \ul ** dir
\f0\b0 \ulnone \
- \'b0\'b4\'c3\'bc\'b0\'a1 \'c0\'da\'c3\'bc\'c0\'fb\'c0\'b8\'b7\'ce \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'b4\'c2 \'ba\'af\'bc\'f6\'b3\'aa \'c7\'d4\'bc\'f6\'b8\'a6 \'ba\'b8\'bf\'a9\'c1\'d8\'b4\'d9.\
dir([1,2,3])\
>>> 
\f2\fs22 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\

\f0\fs42 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 dir(\{\'a1\'ae1\'a1\'af:\'a1\'afa\'a1\'af\})\
>>> [\'a1\'aeclear\'a1\'af, \'a1\'aecopy\'a1\'af, \'a1\'a6 ]\
\

\f1\b \ul ** divmod
\f0\b0 \ulnone \
- divmod(a,b)\'b4\'c2 2\'b0\'b3\'c0\'c7 \'bc\'fd\'c0\'da\'b8\'a6 \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b9\'de\'b0\'ed, a\'b8\'a6 b\'b7\'ce \'b3\'aa\'b4\'ab \'b8\'f2\'b0\'fa \'b3\'aa\'b8\'d3\'c1\'f6\'b8\'a6 \'c6\'a9\'c7\'c3\'c7\'fc\'c5\'c2\'b7\'ce \'b5\'b9\'b7\'c1\'c1\'dc\
divmod(7,3)\
>>> (2,1)\
\
cf.\
7//3 >> 2\
7%3 >> 1\
\

\f1\b \ul ** enumerate
\f0\b0 \ulnone \
- \'a1\'ae\'bf\'ad\'b0\'c5\'c7\'cf\'b4\'d9\'a1\'af\
- \'bc\'f8\'bc\'ad\'b0\'a1 \'c0\'d6\'b4\'c2 \'c0\'da\'b7\'e1\'c7\'fc(\'b8\'ae\'bd\'ba\'c6\'ae, \'c6\'a9\'c7\'c3, \'b9\'ae\'c0\'da\'bf\'ad)\'c0\'bb \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b9\'de\'be\'c6 \'c0\'ce\'b5\'a6\'bd\'ba \'b0\'aa\'c0\'bb \'c6\'f7\'c7\'d4\'c7\'cf\'b4\'c2 enumerate \'b0\'b4\'c3\'bc\'b8\'a6 \'b5\'b9\'b7\'c1\'c1\'d8\'b4\'d9.\
for i, name in enumerate(['body','foo','bar']):\
    print(i,name)\
>>>\
0 body\
1 foo\
2 bar\
\

\f1\b \ul ** eval
\f0\b0 \ulnone \
- eval(expression)\'c0\'ba \'bd\'c7\'c7\'e0 \'b0\'a1\'b4\'c9\'c7\'d1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'bb \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b9\'de\'be\'c6 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'bb \'bd\'c7\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa\'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\'c0\'cc\'b4\'d9.\
print(eval('1+2'))\
print(eval("'hi'+'a'"))\
print(eval('divmod(4,3)'))\
>>> 3, hia, (1,1)\
- \'c0\'d4\'b7\'c2\'b9\'de\'c0\'ba \'b9\'ae\'c0\'da\'bf\'ad\'b7\'ce \'c6\'c4\'c0\'cc\'bd\'e3 \'c7\'d4\'bc\'f6\'b3\'aa \'c5\'ac\'b7\'a1\'bd\'ba\'b8\'a6 \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'bd\'c7\'c7\'e0\'c7\'cf\'b0\'ed \'bd\'cd\'c0\'bb \'b6\'a7 \'bb\'e7\'bf\'eb\'c7\'d1\'b4\'d9.\
\

\f1\b \ul ** filter
\f0\b0 \ulnone \
- \'bf\'f8\'b7\'a1\'c0\'c7 \'b6\'e6 \'b1\'d7\'b4\'eb\'b7\'ce \'b0\'c9\'b7\'af\'c1\'d8\'b4\'d9!\
(\'b1\'e2\'c1\'b8)\
def positive(l):\
    result = []\
    for i in l:\
        if i>0:\
            result.append(i)\
    return result\
\
print(positive([1, -3, 2, 0, -5, 6]))\
- \'c0\'b8\'b7\'ce \'be\'e7\'bc\'f6\'b8\'a6 \'c6\'c7\'ba\'b0\'c7\'d8\'c1\'d6\'b4\'c2 \'c4\'da\'b5\'e5\
\
(filter)\
def positive(x):\
    return x>0\
\
print(list(filter(positive, [1,-3,2,0,-5,6])))\
- \'b7\'ce \'b0\'a3\'b4\'dc\'c7\'cf\'b0\'d4 \'c1\'a4\'c0\'c7\'c7\'d8\'c1\'d9 \'bc\'f6 \'c0\'d6\'b4\'d9.\
- filter(\'c7\'d4\'bc\'f6\'c0\'cc\'b8\'a7, \'b9\'dd\'ba\'b9\'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc)\
\

\f1\b \ul ** hex
\f0\b0 \ulnone \
- \'c1\'a4\'bc\'f6 \'b0\'aa\'c0\'bb \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 16\'c1\'f8\'bc\'f6\'b7\'ce \'ba\'af\'c8\'af\'c7\'cf\'bf\'a9 \'b5\'b9\'b7\'c1\'c1\'dc\
hex(234)\
>>> \'a1\'ae0xea\'a1\'af\
\

\f1\b \ul **id
\f0\b0 \ulnone \
- \'b0\'b4\'c3\'bc\'b8\'a6 \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'b0\'b4\'c3\'bc\'c0\'c7 \'b0\'ed\'c0\'af \'c1\'d6\'bc\'d2 \'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
a = 3\
b = a\
id(a)\
id(b)\
id(3)\
>>> \'b8\'f0\'b5\'ce \'b0\'b0\'c0\'ba \'c1\'d6\'bc\'d2\'b8\'a6 \'b0\'a1\'b8\'a3\'c5\'b4\
\

\f1\b \ul ** input
\f0\b0 \ulnone \
a = input()\
- \'bb\'e7\'bf\'eb\'c0\'da\'b0\'a1 \'c0\'d4\'b7\'c2\'c7\'d1 \'c1\'a4\'ba\'b8\'b8\'a6 a\'bf\'a1 \'c0\'fa\'c0\'e5\
b = input(\'a1\'b0Enter : \'a1\'b0)\
>>> Enter : \'c0\'d4\'b7\'c2\
- \'b3\'bb\'bf\'eb\'c0\'bb \'b6\'e7\'bf\'ef \'bc\'f6 \'c0\'d6\'b4\'d9.\
\

\f1\b \ul ** int
\f0\b0 \ulnone \
int(\'a1\'ae3\'a1\'af)\
>>> 3\
int(3.4)\
>>> 3\
- \'b9\'ae\'c0\'da\'bf\'ad \'c7\'fc\'c5\'c2\'c0\'c7 \'bc\'fd\'c0\'da\'b3\'aa \'bc\'d2\'bc\'f6\'c1\'a1\'c0\'cc \'c0\'d6\'b4\'c2 \'bc\'fd\'c0\'da \'b5\'ee\'c0\'bb \'c1\'a4\'bc\'f6 \'c7\'fc\'c5\'c2\'b7\'ce \'b5\'b9\'b7\'c1\'c1\'d8\'b4\'d9.\
\
- int(\'bc\'fd\'c0\'da, \'c1\'f8\'bc\'f6)\'b4\'c2, n\'c1\'f8\'bc\'f6\'c0\'c7 \'b9\'ae\'c0\'da\'bf\'ad \'b5\'ee\'c0\'bb 10\'c1\'f8\'bc\'f6\'c0\'c7 \'bc\'f6\'b7\'ce \'b9\'d9\'b2\'d9\'be\'ee\'c1\'d8\'b4\'d9.\
int(\'a1\'af1A\'a1\'af, 16)\
>>> 26\
\

\f1\b \ul ** isinstance
\f0\b0 \ulnone \
- isinstance(\'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba, \'c5\'ac\'b7\'a1\'bd\'ba\'c0\'cc\'b8\'a7)\
- \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b9\'de\'c0\'ba \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'b0\'a1 \'b1\'d7 \'c5\'ac\'b7\'a1\'bd\'ba\'c0\'c7 \'c0\'ce\'bd\'ba\'c5\'cf\'bd\'ba\'c0\'ce\'c1\'f6\'b8\'a6 \'c6\'c7\'b4\'dc, boolean\'c0\'b8\'b7\'ce \'b5\'b9\'b7\'c1\'c1\'d8\'b4\'d9.\
\
class Person:\
    pass\
\
a = Person()\
isinstance(a, Person)\
>> True\
\
b = 3\
isinstance(b, Person)\
>>> False\
\

\f1\b \ul ** len
\f0\b0 \ulnone \
- \'c0\'d4\'b7\'c2\'b0\'aa\'c0\'c7 \'b1\'e6\'c0\'cc\'b8\'a6 \'b5\'b5\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
len(\'a1\'b0python\'a1\'b1)\
>>>6\
len([1,2,3])\
>>>3\
\

\f1\b \ul ** list
\f0\b0 \ulnone \
- \'b9\'dd\'ba\'b9 \'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc s\'b8\'a6 \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'b8\'ae\'bd\'ba\'c6\'ae\'b7\'ce \'b8\'b8\'b5\'e9\'be\'ee \'b5\'b9\'b7\'c1\'c1\'dc\
list(\'a1\'b0python\'a1\'b1)\
>>> [\'a1\'aep\'a1\'af,\'a1\'afy\'a1\'af, \'a1\'a6 \'a1\'afn\'a1\'af]\
list((1,2,3))\
>>> [1,2,3]\
\

\f1\b \ul ** map
\f0\b0 \ulnone \
map(f, iterable)\
- \'b9\'dd\'ba\'b9\'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'c0\'d4\'b7\'c2\'c0\'b8\'b7\'ce \'b9\'de\'be\'c6, \'b0\'a2 \'bf\'e4\'bc\'d2\'b8\'a6 \'c7\'d4\'bc\'f6 f\'b0\'a1 \'bc\'f6\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa\'b8\'a6 \'b9\'ad\'be\'ee\'bc\'ad \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
\
(\'b8\'ae\'bd\'ba\'c6\'ae\'b8\'a6 2\'b9\'e8\'c7\'cf\'bf\'a9 \'c0\'fa\'c0\'e5\'c7\'cf\'b4\'c2 \'c4\'da\'b5\'e5)\
def two_times(numberList):\
    result = []\
    for number in numberList:\
        result.append(number*2)\
    return result\
\
result = two_times([1,2,3,4])\
print(result)\
\
(map \'bb\'e7\'bf\'eb)\
def two_times(x):\
    return x*2\
\
result = list(map(two_times, [1,2,3,4]))\
print(result)\
\
(lambda)\
print(list(map(lambda a: a*2, [1,2,3,4])))\
\

\f1\b \ul **max
\f0\b0 \ulnone \
max(iterable)\
- \'b9\'dd\'ba\'b9 \'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'b1\'d7 \'c3\'d6\'b4\'f1\'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\'c0\'cc\'b4\'d9.\
max([1,2,3])\
>>> 3\
max(\'a1\'b0python\'a1\'b1)\
>>>\'a1\'afy\'a1\'af\
\

\f1\b \ul **min
\f0\b0 \ulnone \
- max\'c0\'c7 \'b9\'dd\'b4\'eb\'b7\'ce \'c3\'d6\'bc\'da\'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'dc\
>>> 1\
>>> \'a1\'aeh\'a1\'af\
\

\f1\b \ul ** oct
\f0\b0 \ulnone \
- \'c1\'a4\'bc\'f6\'c7\'fc\'c5\'c2\'c0\'c7 \'bc\'fd\'c0\'da\'b8\'a6 8\'c1\'f8\'bc\'f6 \'b9\'ae\'c0\'da\'bf\'ad\'b7\'ce \'b9\'d9\'b2\'d9\'be\'ee \'b5\'b9\'b7\'c1\'c1\'dc\
oct(34)\
>>> \'a1\'ae0o42\'a1\'af\
\

\f1\b \ul ** open
\f0\b0 \ulnone \
open(filename,[mode])\
- \'c6\'c4\'c0\'cf\'c0\'cc\'b8\'a7\'b0\'fa \'c0\'d0\'b1\'e2 \'b9\'e6\'b9\'fd\'c0\'bb \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'c6\'c4\'c0\'cf \'b0\'b4\'c3\'bc\'b8\'a6 \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
- \'c0\'d0\'b1\'e2 \'b9\'e6\'b9\'fd \'bb\'fd\'b7\'ab\'bd\'c3 \'b1\'e2\'ba\'bb\'b0\'aa\'c0\'ce \'c0\'d0\'b1\'e2\'c0\'fc\'bf\'eb\'b8\'f0\'b5\'e5 \'a1\'aer\'a1\'af \'c0\'fb\'bf\'eb\'b5\'ca\
\'a1\'aew\'a1\'af : \'be\'b2\'b1\'e2\
\'a1\'aer\'a1\'af : \'c0\'d0\'b1\'e2\
\'a1\'aea\'a1\'af : \'c3\'df\'b0\'a1\'b8\'f0\'b5\'e5\
\'a1\'aeb\'a1\'af : \'b9\'d9\'c0\'cc\'b3\'ca\'b8\'ae\'b8\'f0\'b5\'e5 (w,r,a\'bf\'cd \'c7\'d4\'b2\'b2 \'bb\'e7\'bf\'eb \'a1\'a6 rb, wb \'b5\'ee)\
f = open(\'a1\'b0binary_file\'a1\'b1, \'a1\'b0rb\'a1\'b1)\
\

\f1\b \ul ** ord
\f0\b0 \ulnone \
- \'b9\'ae\'c0\'da\'c0\'c7 \'be\'c6\'bd\'ba\'c5\'b0\'c4\'da\'b5\'e5 \'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'d6\'b4\'c2 \'c7\'d4\'bc\'f6\
ord(\'a1\'aea\'a1\'af)\
>>> 97\
\

\f1\b \ul ** pow
\f0\b0 \ulnone \
pow(x,y) : x\'c0\'c7 y\'c1\'a6\'b0\'f6\'c7\'d1 \'b0\'e1\'b0\'fa\'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'dc\
pow(2,4)\
>>> 16\
\

\f1\b \ul ** range
\f0\b0 \ulnone \
- for\'b9\'ae\'b0\'fa \'c7\'d4\'b2\'b2 \'c0\'da\'c1\'d6 \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'c7\'d4\'bc\'f6\
- \'c0\'d4\'b7\'c2\'b9\'de\'c0\'ba \'bc\'fd\'c0\'da\'bf\'a1 \'c7\'d8\'b4\'e7\'c7\'cf\'b4\'c2 \'b9\'fc\'c0\'a7 \'b0\'aa\'c0\'bb \'b9\'dd\'ba\'b9\'b0\'a1\'b4\'c9\'c7\'d1 \'b0\'b4\'c3\'bc\'b7\'ce \'b8\'b8\'b5\'e9\'be\'ee \'c1\'d8\'b4\'d9.\
\

\f1\b * \'c0\'ce\'bc\'f6\'b0\'a1 \'c7\'cf\'b3\'aa (\'b3\'a1\'b0\'aa)
\f0\b0 \
list(range(5))\
[0, 1, 2, 3, 4]\
\

\f1\b * \'c0\'ce\'bc\'f6\'b0\'a1 2\'b0\'b3 (\'c3\'b3\'c0\'bd/\'b3\'a1)
\f0\b0 \
list(range(5,10))\
[5, 6, 7, 8, 9]\
\

\f1\b * \'c0\'ce\'bc\'f6\'b0\'a1 3\'b0\'b3 (\'c3\'b3\'c0\'bd/\'b3\'a1/\'b0\'c5\'b8\'ae)
\f0\b0 \
list(range(1,10,2))\
[1, 3, 5, 7, 9]\
list(range(0,-10,-1))\
[0, -1, -2, \'a1\'a6 , -9]\
- \'bc\'bc\'b9\'f8\'c2\'b0 \'bc\'fd\'c0\'da\'b4\'c2 \'bc\'fd\'c0\'da\'bb\'e7\'c0\'cc\'c0\'c7 \'b0\'c5\'b8\'ae\'b8\'a6 \'c0\'c7\'b9\'cc\'c7\'d1\'b4\'d9.\
\

\f1\b \ul ** round
\f0\b0 \ulnone \
\'bc\'fd\'c0\'da\'b8\'a6 \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'b9\'dd\'bf\'c3\'b8\'b2 \'c7\'d8\'c1\'dc\
round(4.6)\
>>> 5\
\
round(5.678, 2)\
>>> 5.68\
- \'b9\'dd\'bf\'c3\'b8\'b2\'c7\'cf\'bf\'a9 \'c7\'a5\'bd\'c3\'c7\'cf\'b0\'ed \'bd\'cd\'c0\'ba \'bc\'d2\'bc\'f6\'c1\'a1\'c0\'c7 \'c0\'da\'b8\'b4\'bc\'f6\'b8\'a6 \'c1\'a4\'c7\'d8\'c1\'d9 \'bc\'f6 \'c0\'d6\'b4\'d9.\
\

\f1\b \ul ** sorted
\f0\b0 \ulnone \
- \'c0\'d4\'b7\'c2\'b0\'aa\'c0\'bb \'c1\'a4\'b7\'c4\'c7\'d1 \'c8\'c4 \'b1\'d7 \'b0\'e1\'b0\'fa\'b8\'a6 \'b8\'ae\'bd\'ba\'c6\'ae\'b7\'ce \'b5\'b9\'b7\'c1\'c1\'dc\
sorted([3,1,2])\
>>> [1,2,3]\
sorted([\'a1\'aea\'a1\'af, \'a1\'aec\'a1\'af, \'a1\'aeb\'a1\'af])\
>>> [\'a1\'aea\'a1\'af, \'a1\'aeb\'a1\'af, \'a1\'aec\'a1\'af]\
sorted(\'a1\'b0zero\'a1\'b1)\
>>> [\'a1\'aee\'a1\'af, \'a1\'aeo\'a1\'af, \'a1\'aer\'a1\'af, \'a1\'aez\'a1\'af]\
\
- \'b8\'ae\'bd\'ba\'c6\'ae \'c0\'da\'b7\'e1\'c7\'fc\'c0\'c7 sort \'c7\'d4\'bc\'f6\'bf\'cd\'c0\'c7 \'c2\'f7\'c0\'cc\'b4\'c2, sort\'b4\'c2 \'b0\'b4\'c3\'bc \'b1\'d7\'c0\'da\'c3\'bc\'b8\'a6 \'c1\'a4\'b7\'c4\'b8\'b8 \'c7\'d2 \'bb\'d3, \'b0\'e1\'b0\'fa\'b8\'a6 \'b5\'b9\'b7\'c1\'c1\'d6\'c1\'f6 \'be\'ca\'b4\'c2\'b4\'d9\'b4\'c2 \'c2\'f7\'c0\'cc\'b0\'a1 \'c0\'d6\'b4\'d9.\
\

\f1\b \ul ** str
\f0\b0 \ulnone \
- \'b9\'ae\'c0\'da\'bf\'ad \'c7\'fc\'c5\'c2\'b7\'ce \'b0\'b4\'c3\'bc\'b8\'a6 \'ba\'af\'c8\'af\'c7\'cf\'bf\'a9 \'b5\'b9\'b7\'c1\'c1\'dc\
str(3)\
>>> \'a1\'ae3\'a1\'af\
str(\'a1\'aehi\'a1\'af)\
>>>\'a1\'afhi\'a1\'af\
str(\'a1\'aehi\'a1\'af.upper())\
>>> \'a1\'aeHI\'a1\'af\
\

\f1\b \ul ** sum
\f0\b0 \ulnone \
- \'c0\'d4\'b7\'c2\'b9\'de\'c0\'ba \'b8\'ae\'bd\'ba\'c6\'ae\'b3\'aa \'c6\'a9\'c7\'c3\'c0\'c7 \'b8\'f0\'b5\'e7 \'bf\'e4\'bc\'d2\'c0\'c7 \'c7\'d5\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'dc\
sum([1,2,3])\
>>> 6\
sum((4,5,6))\
>>> 15\
\

\f1\b \ul ** tuple
\f0\b0 \ulnone \
- \'b9\'dd\'ba\'b9\'b0\'a1\'b4\'c9\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'c0\'d4\'b7\'c2\'b9\'de\'be\'c6 \'c6\'a9\'c7\'c3 \'c7\'fc\'c5\'c2\'b7\'ce \'b9\'d9\'b2\'d9\'be\'ee \'b5\'b9\'b7\'c1\'c1\'dc\
tuple(\'a1\'b0abc\'a1\'b1)\
>>> (\'a1\'aea\'a1\'af, \'a1\'aeb\'a1\'af, \'a1\'aec\'a1\'af)\
tuple([1,2,3])\
>>> (1, 2, 3)\
\

\f1\b \ul ** type
\f0\b0 \ulnone \
- \'c0\'d4\'b7\'c2\'b0\'aa\'c0\'c7 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'cc \'b9\'ab\'be\'f9\'c0\'ce\'c1\'f6 \'be\'cb\'b7\'c1\'c1\'dc\
type(\'a1\'b0abc\'a1\'b1)\
>>> str\
type([])\
>>> list\
type(open(\'a1\'b0test\'a1\'b1,\'a1\'b1w\'a1\'b1))\
>>> _io.TextIOWrapper\
\

\f1\b \ul ** zip
\f0\b0 \ulnone \
- \'b5\'bf\'c0\'cf\'c7\'d1 \'b0\'b3\'bc\'f6\'b7\'ce \'c0\'cc\'b7\'e7\'be\'ee\'c1\'f8 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'b9\'ad\'be\'ee\'c1\'dc\
list(zip([1,2,3], [4,5,6])\
>>> [(1,4,), (2,5), (3,6)]\
list(zip(\'a1\'b0abc\'a1\'b1, \'a1\'b0def\'a1\'b1)]\
>>> [(\'a1\'aea\'a1\'af, \'a1\'aed\'a1\'af), (\'a1\'aeb\'a1\'af,\'a1\'afe\'a1\'af), (\'a1\'aec\'a1\'af,\'a1\'aff\'a1\'af)]\
\
}